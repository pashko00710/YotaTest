package com.example.pashko00710.yotatest.utils;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.regex.Pattern;import cz.msebera.android.httpclient.HttpEntity;import cz.msebera.android.httpclient.HttpResponse;import cz.msebera.android.httpclient.client.HttpClient;import cz.msebera.android.httpclient.client.methods.HttpGet;import cz.msebera.android.httpclient.impl.client.DefaultHttpClient;public class RequestCheck {    String finalUrl;    String resString;    public RequestCheck(String resultUrl) {        finalUrl = resultUrl;    }    public void setFinalCode(String resString) {        this.resString = resString;    }    public String getFinalCode() {        return resString;    }    public void sendUrl() {        HttpClient httpclient = new DefaultHttpClient(); // Create HTTP Client        Pattern CLEAR_PATTERN = Pattern.compile("[\\s]+");        finalUrl = CLEAR_PATTERN .matcher(finalUrl).replaceAll("").trim(); // Use a regular expression to remove the spaces in a query        if(finalUrl.trim().isEmpty()) {            finalUrl = "https://google.com";        }        if(!finalUrl.contains("https")) {            finalUrl = "https://".concat(finalUrl);        }        HttpGet httpget = new HttpGet(finalUrl); // Set the action you want to do        // Execute the request        HttpResponse response;        try {            response = httpclient.execute(httpget);            // Get hold of the response entity            HttpEntity entity = response.getEntity();            // If the response does not enclose an entity, there is no need            // to worry about connection release            if (entity != null) {                // A Simple JSON Response Read                InputStream instream = entity.getContent();                resString = convertStreamToString(instream);                // now you have the string representation of the HTML request                instream.close();            }        } catch (Exception e) {            e.printStackTrace();        }    }    private static String convertStreamToString(InputStream is) {    /*     * To convert the InputStream to String we use the BufferedReader.readLine()     * method. We iterate until the BufferedReader return null which means     * there's no more data to read. Each line will appended to a StringBuilder     * and returned as String.     */        BufferedReader reader = new BufferedReader(new InputStreamReader(is));        StringBuilder sb = new StringBuilder();        String line = null;        try {            while ((line = reader.readLine()) != null) {                sb.append(line + "\n");            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                is.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return sb.toString();    }}